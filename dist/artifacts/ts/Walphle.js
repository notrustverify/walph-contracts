"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalphleInstance = exports.Walphle = void 0;
const web3_1 = require("@alephium/web3");
const Walphle_ral_json_1 = __importDefault(require("../Walphle.ral.json"));
const contracts_1 = require("./contracts");
class Factory extends web3_1.ContractFactory {
    constructor() {
        super(...arguments);
        this.eventIndex = {
            TicketBought: 0,
            PoolOpen: 1,
            PoolClose: 2,
            Destroy: 3,
            NewMinTokenAmountToHold: 4,
        };
        this.consts = {
            ErrorCodes: {
                PoolFull: BigInt(0),
                PoolAlreadyClose: BigInt(1),
                PoolAlreadyOpen: BigInt(2),
                PoolClosed: BigInt(3),
                InvalidCaller: BigInt(4),
                NotEnoughToken: BigInt(5),
                PoolNotFull: BigInt(6),
                InvalidAmount: BigInt(7),
            },
        };
        this.tests = {
            getPoolState: async (params) => {
                return (0, web3_1.testMethod)(this, "getPoolState", params);
            },
            getPoolSize: async (params) => {
                return (0, web3_1.testMethod)(this, "getPoolSize", params);
            },
            getBalance: async (params) => {
                return (0, web3_1.testMethod)(this, "getBalance", params);
            },
            buyTicket: async (params) => {
                return (0, web3_1.testMethod)(this, "buyTicket", params);
            },
            distributePrize: async (params) => {
                return (0, web3_1.testMethod)(this, "distributePrize", params);
            },
            closePoolWhenFull: async (params) => {
                return (0, web3_1.testMethod)(this, "closePoolWhenFull", params);
            },
            closePool: async (params) => {
                return (0, web3_1.testMethod)(this, "closePool", params);
            },
            openPool: async (params) => {
                return (0, web3_1.testMethod)(this, "openPool", params);
            },
            destroyPool: async (params) => {
                return (0, web3_1.testMethod)(this, "destroyPool", params);
            },
            changeMinAmountToHold: async (params) => {
                return (0, web3_1.testMethod)(this, "changeMinAmountToHold", params);
            },
        };
    }
    at(address) {
        return new WalphleInstance(address);
    }
}
// Use this object to test and deploy the contract
exports.Walphle = new Factory(web3_1.Contract.fromJson(Walphle_ral_json_1.default, "", "0466a3ff92f2a4be552c47d45dd01bbba568c2caa9d8e07b3dfa81f1a3ee46de"));
// Use this class to interact with the blockchain
class WalphleInstance extends web3_1.ContractInstance {
    constructor(address) {
        super(address);
        this.methods = {
            getPoolState: async (params) => {
                return (0, web3_1.callMethod)(exports.Walphle, this, "getPoolState", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getPoolSize: async (params) => {
                return (0, web3_1.callMethod)(exports.Walphle, this, "getPoolSize", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getBalance: async (params) => {
                return (0, web3_1.callMethod)(exports.Walphle, this, "getBalance", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
        };
    }
    async fetchState() {
        return (0, web3_1.fetchContractState)(exports.Walphle, this);
    }
    async getContractEventsCurrentCount() {
        return (0, web3_1.getContractEventsCurrentCount)(this.address);
    }
    subscribeTicketBoughtEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.Walphle.contract, this, options, "TicketBought", fromCount);
    }
    subscribePoolOpenEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.Walphle.contract, this, options, "PoolOpen", fromCount);
    }
    subscribePoolCloseEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.Walphle.contract, this, options, "PoolClose", fromCount);
    }
    subscribeDestroyEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.Walphle.contract, this, options, "Destroy", fromCount);
    }
    subscribeNewMinTokenAmountToHoldEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.Walphle.contract, this, options, "NewMinTokenAmountToHold", fromCount);
    }
    subscribeAllEvents(options, fromCount) {
        return (0, web3_1.subscribeContractEvents)(exports.Walphle.contract, this, options, fromCount);
    }
    async multicall(calls) {
        return (await (0, web3_1.multicallMethods)(exports.Walphle, this, calls, contracts_1.getContractByCodeHash));
    }
}
exports.WalphleInstance = WalphleInstance;
