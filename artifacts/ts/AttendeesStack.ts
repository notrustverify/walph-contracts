/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as AttendeesStackContractJson } from "../AttendeesStack.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace AttendeesStackTypes {
  export type Fields = {
    owner: Address;
    zeroAddress: Address;
    stackSize: bigint;
    attendees: [
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address
    ];
    index: bigint;
  };

  export type State = ContractState<Fields>;

  export type AddressPushedEvent = ContractEvent<{ address: Address }>;
  export type AddressPoppedEvent = ContractEvent<{ address: Address }>;

  export interface CallMethodTable {
    getIndex: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    pop: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  AttendeesStackInstance,
  AttendeesStackTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as AttendeesStackTypes.Fields;
  }

  eventIndex = { AddressPushed: 0, AddressPopped: 1 };
  consts = {
    ErrorCodes: {
      StackEmpty: BigInt(0),
      StackFull: BigInt(1),
      InvalidCaller: BigInt(2),
    },
  };

  at(address: string): AttendeesStackInstance {
    return new AttendeesStackInstance(address);
  }

  tests = {
    getIndex: async (
      params: Omit<
        TestContractParams<AttendeesStackTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getIndex", params);
    },
    pop: async (
      params: Omit<
        TestContractParams<AttendeesStackTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "pop", params);
    },
    push: async (
      params: TestContractParams<
        AttendeesStackTypes.Fields,
        { address: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "push", params);
    },
  };
}

// Use this object to test and deploy the contract
export const AttendeesStack = new Factory(
  Contract.fromJson(
    AttendeesStackContractJson,
    "",
    "cc061ea79b9d5b1eded31668ce460ef0c5f3e2d02c911355d393f8074b628f13"
  )
);

// Use this class to interact with the blockchain
export class AttendeesStackInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<AttendeesStackTypes.State> {
    return fetchContractState(AttendeesStack, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeAddressPushedEvent(
    options: EventSubscribeOptions<AttendeesStackTypes.AddressPushedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      AttendeesStack.contract,
      this,
      options,
      "AddressPushed",
      fromCount
    );
  }

  subscribeAddressPoppedEvent(
    options: EventSubscribeOptions<AttendeesStackTypes.AddressPoppedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      AttendeesStack.contract,
      this,
      options,
      "AddressPopped",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | AttendeesStackTypes.AddressPushedEvent
      | AttendeesStackTypes.AddressPoppedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      AttendeesStack.contract,
      this,
      options,
      fromCount
    );
  }

  methods = {
    getIndex: async (
      params?: AttendeesStackTypes.CallMethodParams<"getIndex">
    ): Promise<AttendeesStackTypes.CallMethodResult<"getIndex">> => {
      return callMethod(
        AttendeesStack,
        this,
        "getIndex",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    pop: async (
      params?: AttendeesStackTypes.CallMethodParams<"pop">
    ): Promise<AttendeesStackTypes.CallMethodResult<"pop">> => {
      return callMethod(
        AttendeesStack,
        this,
        "pop",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends AttendeesStackTypes.MultiCallParams>(
    calls: Calls
  ): Promise<AttendeesStackTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      AttendeesStack,
      this,
      calls,
      getContractByCodeHash
    )) as AttendeesStackTypes.MultiCallResults<Calls>;
  }
}
