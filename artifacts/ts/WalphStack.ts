/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as WalphStackContractJson } from "../WalphStack.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace WalphStackTypes {
  export type Fields = {
    owner: Address;
    stackSize: bigint;
    contractOwnerSet: boolean;
    contractAddressOwner: Address;
    attendees: [
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address
    ];
    index: bigint;
  };

  export type State = ContractState<Fields>;

  export type AddressPushedEvent = ContractEvent<{ address: Address }>;
  export type AddressPoppedEvent = ContractEvent<{ address: Address }>;

  export interface CallMethodTable {
    getIndex: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getElementByIndex: {
      params: CallContractParams<{ indexToGet: bigint }>;
      result: CallContractResult<Address>;
    };
    getStackSize: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    pop: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  WalphStackInstance,
  WalphStackTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as WalphStackTypes.Fields;
  }

  eventIndex = { AddressPushed: 0, AddressPopped: 1 };
  consts = {
    ErrorCodes: {
      StackEmpty: BigInt(0),
      StackFull: BigInt(1),
      InvalidCaller: BigInt(2),
      OutOfBound: BigInt(3),
      ContractOwnerNotSet: BigInt(4),
    },
  };

  at(address: string): WalphStackInstance {
    return new WalphStackInstance(address);
  }

  tests = {
    getIndex: async (
      params: Omit<
        TestContractParams<WalphStackTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getIndex", params);
    },
    getElementByIndex: async (
      params: TestContractParams<WalphStackTypes.Fields, { indexToGet: bigint }>
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getElementByIndex", params);
    },
    getStackSize: async (
      params: Omit<
        TestContractParams<WalphStackTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getStackSize", params);
    },
    setOwner: async (
      params: TestContractParams<
        WalphStackTypes.Fields,
        { walphContractAddress: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setOwner", params);
    },
    pop: async (
      params: Omit<
        TestContractParams<WalphStackTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "pop", params);
    },
    push: async (
      params: TestContractParams<WalphStackTypes.Fields, { address: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "push", params);
    },
    resetIndex: async (
      params: Omit<
        TestContractParams<WalphStackTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "resetIndex", params);
    },
  };
}

// Use this object to test and deploy the contract
export const WalphStack = new Factory(
  Contract.fromJson(
    WalphStackContractJson,
    "",
    "655e81d2e9fb6485af5530fe10c5594225be2d230e80c051b9e34d988f962013"
  )
);

// Use this class to interact with the blockchain
export class WalphStackInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<WalphStackTypes.State> {
    return fetchContractState(WalphStack, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeAddressPushedEvent(
    options: EventSubscribeOptions<WalphStackTypes.AddressPushedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      WalphStack.contract,
      this,
      options,
      "AddressPushed",
      fromCount
    );
  }

  subscribeAddressPoppedEvent(
    options: EventSubscribeOptions<WalphStackTypes.AddressPoppedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      WalphStack.contract,
      this,
      options,
      "AddressPopped",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      WalphStackTypes.AddressPushedEvent | WalphStackTypes.AddressPoppedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      WalphStack.contract,
      this,
      options,
      fromCount
    );
  }

  methods = {
    getIndex: async (
      params?: WalphStackTypes.CallMethodParams<"getIndex">
    ): Promise<WalphStackTypes.CallMethodResult<"getIndex">> => {
      return callMethod(
        WalphStack,
        this,
        "getIndex",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getElementByIndex: async (
      params: WalphStackTypes.CallMethodParams<"getElementByIndex">
    ): Promise<WalphStackTypes.CallMethodResult<"getElementByIndex">> => {
      return callMethod(
        WalphStack,
        this,
        "getElementByIndex",
        params,
        getContractByCodeHash
      );
    },
    getStackSize: async (
      params?: WalphStackTypes.CallMethodParams<"getStackSize">
    ): Promise<WalphStackTypes.CallMethodResult<"getStackSize">> => {
      return callMethod(
        WalphStack,
        this,
        "getStackSize",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    pop: async (
      params?: WalphStackTypes.CallMethodParams<"pop">
    ): Promise<WalphStackTypes.CallMethodResult<"pop">> => {
      return callMethod(
        WalphStack,
        this,
        "pop",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends WalphStackTypes.MultiCallParams>(
    calls: Calls
  ): Promise<WalphStackTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      WalphStack,
      this,
      calls,
      getContractByCodeHash
    )) as WalphStackTypes.MultiCallResults<Calls>;
  }
}
