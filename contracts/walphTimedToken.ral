Contract WalphTimedToken(
    poolSize: U256,
    poolOwner: Address,
    poolFees: U256,
    tokenId: ByteVec,
    ticketPrice: U256,
    mut drawTimestamp: U256,
    mut repeatEvery: U256,
    mut open: Bool,
    mut balance: U256,
    mut feesBalance: U256,
    mut dustBalance: U256,
    mut numAttendees: U256,
    mut attendees: [Address;80],
    mut lastWinner: Address
){
    

    event TicketBought(from: Address, amount: U256)
    event PoolOpen()
    event PoolClose()
    event Destroy(from: Address)
    event Winner(address: Address)
    event PoolDrawn(amount: U256)
    event NewRepeatEvery(newRepeat: U256)

    enum ErrorCodes {
        PoolFull = 0
        PoolAlreadyClose = 1
        PoolAlreadyOpen = 2
        PoolClosed = 3
        InvalidCaller = 4
        PoolNotFull = 6
        InvalidAmount = 7
        TimestampOrAttendeesNotReached = 8
        NoAttendees = 9
        NotValidAddress = 10
        TimestampReached = 11
    }


    fn random() -> (U256){
        assert!(numAttendees > 0, ErrorCodes.PoolNotFull)
        let seed = u256From32Byte!(blake2b!(toByteVec!(blockTarget!()) ++ toByteVec!(blockTimeStamp!())))
        emit Debug(`rnd is ${seed}`)
        return addModN!(0,seed, numAttendees)
    }

    @using(preapprovedAssets = true, assetsInContract = false, updateFields = true, checkExternalCaller = false)
    fn distributePrize() -> (){
         checkCaller!(callerAddress!() == selfAddress!(), ErrorCodes.InvalidCaller)
         assert!(balance > 0, ErrorCodes.PoolNotFull)
         assert!(numAttendees > 0, ErrorCodes.NoAttendees)


        lastWinner = attendees[random()]
        assert!(lastWinner != @tgx7VNFoP9DJiFMFgXXtafQZkUvyEdDHT9ryamHJYrjq, ErrorCodes.NotValidAddress)
        
        let poolOwnerAmount = balance * poolFees/100
        let winnerAmount = balance - poolOwnerAmount
        balance = 0
        numAttendees = 0


        dustBalance = dustBalance - dustAmount!()
        transferTokenFromSelf!(lastWinner, ALPH,  dustAmount!())
        transferTokenFromSelf!(lastWinner, tokenId, winnerAmount)

        emit Winner(lastWinner)

     }


    pub fn getPoolState() -> (Bool) {
        return open
    }

    pub fn getPoolSize() -> (U256) {
        return poolSize
    }

    pub fn getBalance() -> (U256){
        return balance
    }

    pub fn getTicketPrice() -> (U256){
        return ticketPrice
    }
    
    @using(preapprovedAssets = false, assetsInContract = true, updateFields = true)
    pub fn withdraw() -> () {
        checkCaller!(callerAddress!() == poolOwner, ErrorCodes.InvalidCaller)
        assert!(feesBalance > 0, ErrorCodes.PoolNotFull)

        transferTokenFromSelf!(poolOwner, ALPH, dustBalance-dustAmount!())
        transferTokenFromSelf!(poolOwner, tokenId, feesBalance)
        feesBalance = 0

    }

    // can be called anytime if the timestamp target is reached
    @using(updateFields = true, assetsInContract = true)
    pub fn draw() -> (){
        let actualBlockTs = blockTimeStamp!()
        assert!(actualBlockTs > drawTimestamp || numAttendees >= poolSize/ticketPrice, ErrorCodes.TimestampOrAttendeesNotReached) // draw the pool if it's full

        // balance is 0 means nobody participate but we still have to move the timestamp for the next draw
        if (balance <= 0 || numAttendees == 1){

            drawTimestamp = actualBlockTs + repeatEvery

        } else {      

            drawTimestamp = actualBlockTs + repeatEvery
            distributePrize{selfAddress!() -> tokenId: balance, ALPH: dustAmount!(); }()
        }
        emit PoolDrawn(balance)

    }

    @using(preapprovedAssets = true, assetsInContract = true, updateFields = true, checkExternalCaller = false)
    pub fn buyTicket(amount: U256) -> (){       
        let caller = callerAddress!()
        assert!(blockTimeStamp!() < drawTimestamp , ErrorCodes.TimestampReached)
        assert!(balance + amount <= poolSize, ErrorCodes.PoolFull)
        assert!(open, ErrorCodes.PoolClosed)
        assert!(addModN!(amount,0 , ticketPrice) == 0, ErrorCodes.InvalidAmount)
        assert!(amount >= ticketPrice, ErrorCodes.InvalidAmount)
                
        let numberTicketsBought = amount / ticketPrice
        let mut numberPlaceCounter = 0

        // fill the array with the buyer address
        while (numberPlaceCounter < numberTicketsBought){
            attendees[numAttendees] = caller
            numAttendees = numAttendees + 1
            numberPlaceCounter = numberPlaceCounter + 1
        }

        emit TicketBought(caller, amount)

        // used to check if the amount added will close the pool
        feesBalance = feesBalance + amount * poolFees/100
        dustBalance = dustBalance + dustAmount!()
        balance = amount + balance

        transferTokenToSelf!(caller, ALPH,  dustAmount!())
        transferTokenToSelf!(caller, tokenId, amount)
       
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn closePool() -> (){
        assert!(open, ErrorCodes.PoolAlreadyClose)
        checkCaller!(callerAddress!() == poolOwner, ErrorCodes.InvalidCaller)

        open = false

        emit PoolClose()
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn openPool() -> (){
        assert!(!open, ErrorCodes.PoolAlreadyOpen)
        checkCaller!(callerAddress!() == poolOwner, ErrorCodes.InvalidCaller)

        open = true

        emit PoolOpen()
    }

    @using(assetsInContract = true, updateFields = false, checkExternalCaller = true)
    pub fn destroyPool() -> () {
        checkCaller!(callerAddress!() == poolOwner, ErrorCodes.InvalidCaller)

        destroySelf!(poolOwner)

        emit Destroy(poolOwner)
    }

    @using(assetsInContract = false, updateFields = true, checkExternalCaller = true)
    pub fn changeRepeatEvery(newRepeat: U256) -> () {
        checkCaller!(callerAddress!() == poolOwner, ErrorCodes.InvalidCaller)

        repeatEvery = newRepeat

        emit NewRepeatEvery(newRepeat)
    }


}