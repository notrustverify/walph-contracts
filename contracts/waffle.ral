Contract Walphle(
    poolSize: U256,
    poolOwner: Address,
    poolFees: U256,
    minAlfAmount: U256,
    mut open: Bool,
    mut balance: U256,
    mut numAttendees: U256,
    mut attendees: [Address;10],
    mut lastWinner: Address
){
    

    event TicketBought(from: Address, amount: U256)
    event PoolOpen()
    event PoolClose()
    event Destroy(from: Address)

    enum ErrorCodes {
        PoolFull = 0
        PoolAlreadyClose = 1
        PoolAlreadyOpen = 2
        PoolClosed = 3
        InvalidCaller = 4
        NotEnoughALF = 5
        PoolNotFull = 6
        InvalidAmount = 7
    }

    pub fn getPoolState() -> (Bool) {
        return open
    }

    pub fn getPoolSize() -> (U256) {
        return poolSize
    }

    pub fn getBalance() -> (U256){
        return balance
    }

   @using(preapprovedAssets = true) 
   fn getNumALF(from: Address) -> (U256){
        return tokenRemaining!(from, #47504df5a7b18dcecdbf1ea00b7e644d0a7c93919f2d2061ba153f241f03b801)
    }

    @using(preapprovedAssets = true, assetsInContract = true, updateFields = true, checkExternalCaller = false)
    pub fn buyTicket(amount: U256) -> (){
        let caller = callerAddress!()
        assert!(balance + amount <= poolSize, ErrorCodes.PoolFull)
        assert!(open, ErrorCodes.PoolClosed)
        assert!(getNumALF{caller -> #47504df5a7b18dcecdbf1ea00b7e644d0a7c93919f2d2061ba153f241f03b801: minAlfAmount}(caller) >= minAlfAmount, ErrorCodes.NotEnoughALF)
        assert!(amount == 1 * 10 ** 18, ErrorCodes.InvalidAmount)

        transferTokenToSelf!(caller, ALPH, amount)

        balance = balance + amount
        emit TicketBought(caller, amount)

        
        attendees[numAttendees] = caller
        numAttendees = numAttendees + 1

        // last person to complete the pool close it
        if(balance >= poolSize){
            closePoolWhenFull()
        }
        
    }

    @using(preapprovedAssets = false, assetsInContract = true, updateFields = true, checkExternalCaller = true)
    pub fn distributePrize(winner: Address) -> (){
        assert!(!open, ErrorCodes.PoolAlreadyClose)
        checkCaller!(callerAddress!() == poolOwner, ErrorCodes.InvalidCaller)

        
        transferTokenFromSelf!(callerAddress!(), ALPH, balance * poolFees/100 )
        transferTokenFromSelf!(winner, ALPH, balance - (balance * poolFees/100))
        lastWinner = winner
        balance = 0
        numAttendees = 0

        open = true
        emit PoolOpen()

    }

    @using(updateFields = true, checkExternalCaller = false)
    pub fn closePoolWhenFull() -> (){
        assert!(open, ErrorCodes.PoolAlreadyClose)
        assert!(balance >= poolSize, ErrorCodes.PoolNotFull)

        open = false

        emit PoolClose()
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn closePool() -> (){
        assert!(open, ErrorCodes.PoolAlreadyClose)
        checkCaller!(callerAddress!() == poolOwner, ErrorCodes.InvalidCaller)

        open = false

        emit PoolClose()
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn openPool() -> (){
        assert!(!open, ErrorCodes.PoolAlreadyOpen)
        checkCaller!(callerAddress!() == poolOwner, ErrorCodes.InvalidCaller)

        open = true

        emit PoolOpen()
    }

    @using(assetsInContract = true, updateFields = false, checkExternalCaller = true)
    pub fn destroyPool() -> () {
        checkCaller!(callerAddress!() == poolOwner, ErrorCodes.InvalidCaller)

        destroySelf!(poolOwner)

        emit Destroy(poolOwner)
    }


}