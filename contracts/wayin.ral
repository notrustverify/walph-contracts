Contract Wayin(
    poolSize: U256,
    poolOwner: Address,
    poolFees: U256,
    tokenId: ByteVec,
    ticketPrice: U256,
    decimal: U256,
    mut open: Bool,
    mut balance: U256,
    mut feesBalance: U256,
    mut dustBalance: U256,
    mut numAttendees: U256,
    mut attendees: [Address;10],
    mut lastWinner: Address
){
    

    event TicketBought(from: Address, amount: U256)
    event PoolOpen()
    event PoolClose()
    event Destroy(from: Address)
    event Winner(address: Address)

    enum ErrorCodes {
        PoolFull = 0
        PoolAlreadyClose = 1
        PoolAlreadyOpen = 2
        PoolClosed = 3
        InvalidCaller = 4
        PoolNotFull = 6
        InvalidAmount = 7
    }


    fn random() -> (U256){
        assert!(numAttendees > 0, ErrorCodes.PoolNotFull)
        let seed = u256From32Byte!(blake2b!(toByteVec!(blockTarget!()) ++ toByteVec!(blockTimeStamp!())))
        emit Debug(`rnd is ${seed}`)
        return addModN!(0,seed, numAttendees)
    }

    @using(preapprovedAssets = true, assetsInContract = false, updateFields = true, checkExternalCaller = false)
    fn distributePrize(lastAttendee: Address, amount: U256) -> (){
         checkCaller!(callerAddress!() == selfAddress!(), ErrorCodes.InvalidCaller)
         assert!(balance + amount >= poolSize, ErrorCodes.PoolNotFull)

        lastWinner = attendees[random()]
        

        let poolOwnerAmount = (balance+amount) * poolFees/100

        //one person buy all the pool not update the balance, only the amount is taken
        if(balance > 0){
            let winnerAmount = balance - poolOwnerAmount
            transferTokenFromSelf!(poolOwner, ALPH, dustAmount!())
            transferTokenFromSelf!(lastWinner, tokenId, winnerAmount)
            dustBalance = dustBalance - dustAmount!()
        }

        balance = 0
        numAttendees = 0
        dustBalance = dustBalance - dustAmount!()

        // the last attendee will be the one with the rest of ALPH to sent to the winner, it will be the one who send it in addition of the rest of the pool
        transferToken!(lastAttendee, lastWinner, ALPH,  dustAmount!())
        transferToken!(lastAttendee, lastWinner, tokenId, amount)
        

        emit Winner(lastWinner)

     }


    pub fn getPoolState() -> (Bool) {
        return open
    }

    pub fn getPoolSize() -> (U256) {
        return poolSize
    }

    pub fn getBalance() -> (U256){
        return balance
    }

    pub fn getTicketPrice() -> (U256){
        return ticketPrice
    }
    
    @using(preapprovedAssets = true, assetsInContract = true, updateFields = true)
    pub fn withdraw() -> () {
        checkCaller!(callerAddress!() == poolOwner, ErrorCodes.InvalidCaller)
        assert!(feesBalance > 0, ErrorCodes.PoolNotFull)

        transferTokenFromSelf!(poolOwner, ALPH, dustBalance)
        transferTokenFromSelf!(poolOwner, tokenId, feesBalance)
        feesBalance = 0
        dustBalance = 0

    }

    @using(preapprovedAssets = true, assetsInContract = true, updateFields = true, checkExternalCaller = false)
    pub fn buyTicket(amount: U256) -> (){
        let caller = callerAddress!()
        assert!(balance + amount <= poolSize, ErrorCodes.PoolFull)
        assert!(open, ErrorCodes.PoolClosed)
        assert!(addModN!(amount, 0 , 10 ** decimal) == 0, ErrorCodes.InvalidAmount) // dirty

        let numberTicketsBought = amount / ticketPrice
        let mut numberPlaceCounter = 0

        // fill the array with the buyer address
        while (numberPlaceCounter < numberTicketsBought){
            attendees[numAttendees] = caller
            numAttendees = numAttendees + 1
            numberPlaceCounter = numberPlaceCounter + 1

        }

        emit TicketBought(caller, amount)

        // used to check if the amount added will close the pool
        let balanceCheck = balance + amount
        feesBalance = feesBalance + amount * poolFees/100
        dustBalance = dustBalance + dustAmount!()
        // last person to complete the pool close it and start the draw
        if (balanceCheck >= poolSize){
            assert!(balanceCheck >= poolSize, ErrorCodes.PoolNotFull)
            
            // check if the number of attendees is full
            assert!(numAttendees == poolSize / ticketPrice, ErrorCodes.PoolNotFull)

            distributePrize{selfAddress!() -> tokenId: balance, ALPH: dustAmount!(); caller -> tokenId: amount, ALPH: dustAmount!();  }(caller, amount)
       } else {
            balance = balance + amount
            transferTokenToSelf!(caller, ALPH,  dustAmount!())
            transferTokenToSelf!(caller, tokenId, amount)
       }
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn closePool() -> (){
        assert!(open, ErrorCodes.PoolAlreadyClose)
        checkCaller!(callerAddress!() == poolOwner, ErrorCodes.InvalidCaller)

        open = false

        emit PoolClose()
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn openPool() -> (){
        assert!(!open, ErrorCodes.PoolAlreadyOpen)
        checkCaller!(callerAddress!() == poolOwner, ErrorCodes.InvalidCaller)

        open = true

        emit PoolOpen()
    }

    @using(assetsInContract = true, updateFields = false, checkExternalCaller = true)
    pub fn destroyPool() -> () {
        checkCaller!(callerAddress!() == poolOwner, ErrorCodes.InvalidCaller)

        destroySelf!(poolOwner)

        emit Destroy(poolOwner)
    }

}
